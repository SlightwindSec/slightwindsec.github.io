<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Paillier on Slightwind</title>
    <link>https://slightwind.cn/tags/paillier/</link>
    <description>Recent content in Paillier on Slightwind</description>
    <image>
      <title>Slightwind</title>
      <url>https://slightwind.cn/papermod-cover.png</url>
      <link>https://slightwind.cn/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 20 Jul 2021 00:23:48 +0000</lastBuildDate><atom:link href="https://slightwind.cn/tags/paillier/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Official Solution to the &#34;lowExponent&#34; Problem in NepCTF2021</title>
      <link>https://slightwind.cn/posts/ctf/official-solution-to-lowexponent-problem-in-nepctf2021/</link>
      <pubDate>Tue, 20 Jul 2021 00:23:48 +0000</pubDate>
      
      <guid>https://slightwind.cn/posts/ctf/official-solution-to-lowexponent-problem-in-nepctf2021/</guid>
      <description>这题使用的加密算法是 Demytko，属于一种类似 RSA 的在椭圆曲线上的加密算法，这题的攻击思路也是可以完全类比 RSA Hastad 广播攻击。
加密后的结果是椭圆曲线上的点， Division Polynomials 使我们可以用仅含一个未知数的多项式来表示这个点的 $x$ 坐标：
$$ \begin{aligned} \psi_{-1} &amp;amp;=-1 \\ \psi_{0} &amp;amp;=0 \\ \psi_{1} &amp;amp;=1 \\ \psi_{2} &amp;amp;=2 y \\ \psi_{3} &amp;amp;=3 x^{4}+6 a x^{2}+12 b x-a^{2} \\ \psi_{4} &amp;amp;=4 y\left(x^{6}+5 a x^{4}+20 b x^{3}-5 a^{2} x^{2}-4 a b x-8 b^{2}-a^{3}\right) \\ \psi_{2 i+1} &amp;amp;=\psi_{i}\left(\psi_{i+2} \psi_{i-1}^{2}-\psi_{i-2} \psi_{i+1}^{2}\right) / 2 y, i \geq 2 \\ \psi_{2 i} &amp;amp;=\psi_{i+2} \psi_{i}^{3}-\psi_{i+1}^{3} \psi_{i-1}, i \geq 3 \end{aligned} $$</description>
    </item>
    
    <item>
      <title>Learn Paillier crytposystem from &#34;not_RSA&#34; in DASCTF</title>
      <link>https://slightwind.cn/posts/ctf/learn-paillier-crytposystem-from-not_rsa-in-dasctf/</link>
      <pubDate>Sat, 25 Apr 2020 13:33:02 +0000</pubDate>
      
      <guid>https://slightwind.cn/posts/ctf/learn-paillier-crytposystem-from-not_rsa-in-dasctf/</guid>
      <description>&amp;ldquo;not_RSA&amp;rdquo; in DASCTF 看了大佬的博客才知道是 Paillier cryptosystem，wtcl&amp;hellip; 不过还是记录一下自己推导的解题过程
直接使用现成的 Paillier cryptosystem 解密算法解决这题非常容易，分解 n 然后直接套 decrypt 函数就解开了&amp;hellip;
题目：
from Crypto.Util.number import getPrime as getprime ,long_to_bytes,bytes_to_long,inverse from secret import flag,p,q from sympy import isprime,nextprime import random m=bytes_to_long(flag) n=p*q g=n+1 r=random.randint(1,n) c=(pow(g,m,n*n)*pow(r,n,n*n))%(n*n) print(&#39;c=&#39;,c) print(&#39;n=&#39;,n) 主要加密过程是： $$ \begin{aligned} c&amp;amp;\equiv(g^m \ mod \ n^2)(r^n \ mod \ n^2) \ &amp;amp;(mod \ n^2) \\ &amp;amp;\equiv g^m r^n \ &amp;amp;(mod \ n^2) \end{aligned} $$
其中有 $$ \begin{aligned} g^m&amp;amp;\equiv (n+1)^m \ &amp;amp;(mod \ n^2) \\ &amp;amp;\equiv C_m^0 n^0 + C_m^1 n^1 +C_m^2n^2+&amp;hellip;+C_m^mn^m \ &amp;amp;(mod \ n^2) \\ &amp;amp;\equiv C_m^0 n^0 + C_m^1 n^1 \ &amp;amp;(mod \ n^2)\\ &amp;amp;\equiv 1 + mn \ &amp;amp;(mod \ n^2) \end{aligned} $$ 所以得到$c\equiv g^m r^n\equiv (1 + mn)r^n \ (mod \ n^2)$</description>
    </item>
    
  </channel>
</rss>
